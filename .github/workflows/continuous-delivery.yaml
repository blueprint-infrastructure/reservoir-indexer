name: Continuous Delivery

on:
  push:
    branches: [main, development]

env:
  NODE_VERSION: "18.x"
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: dorny/paths-filter@v3
        id: packages
        with:
          base: ${{ github.ref }}
          filters: |
            changed:
              - 'DockerfileBase'
              - 'package.json'
              - 'yarn.lock'
              - 'turbo.json'
              - 'packages/indexer/package.json'
              - 'packages/indexer/yarn.lock'
              - 'packages/mint-interface/package.json'
              - 'packages/sdk/package.json'

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push builder
        if: steps.packages.outputs.changed == 'true'
        uses: docker/build-push-action@v5
        with:
          push: true
          file: DockerfileBase
          tags: |
            ghcr.io/reservoirprotocol/indexer:latest-builder-${{ github.ref_name }}

      - name: Build and push base
        if: steps.packages.outputs.changed == 'true'
        uses: docker/build-push-action@v5
        with:
          push: true
          file: DockerfileBase
          tags: |
            ghcr.io/reservoirprotocol/indexer:latest-base-${{ github.ref_name }}
          build-args: |
            MODE=--production

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: |
            ghcr.io/reservoirprotocol/indexer:latest
            ghcr.io/reservoirprotocol/indexer:${{ github.sha }}
            ghcr.io/reservoirprotocol/indexer:${{ github.ref_name }}-${{ github.sha }}
          build-args: |
            TAG=${{ github.ref_name }}

      - name: Post to Slack
        if: ${{ always() }}
        id: slack-build
        uses: unevenlabs/slack-github-action@v1.0.2
        with:
          channel-id: "ci"
          payload: |
            {
              "text": "GitHub build result: <status-${{ job.status }}-status>\nAuthor: <author-${{ github.actor }}-author>\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "GitHub build result: <status-${{ job.status }}-status>\nAuthor: <author-${{ github.actor }}-author>\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build]
    environment: dev
    # if: github.ref == 'refs/heads/development' && needs.build.outputs.version != ''
    if: github.ref == 'refs/heads/development'
    steps:
      - name: Checkout repository k8s-configs
        uses: actions/checkout@v3
        with:
          repository: unevenlabs/k8s-configs
          token: ${{ secrets.DEVOPSBOT_TOKEN }}
          path: k8s-configs

      - name: Deploy to Dev Environment
        working-directory: k8s-configs
        run: |
          ./utils/version_update_batch.sh indexer-api ${{ github.sha }} $(grep -rl 'application: indexer-api-' dev/platform/ | tr '\n' ' ')
          ./utils/version_update_batch.sh indexer-worker ${{ github.sha }} $(grep -rl 'application: indexer-worker-' dev/platform/ | tr '\n' ' ')
          ./utils/version_update_batch.sh indexer-websocket ${{ github.sha }} $(grep -rl 'application: indexer-websocket-' dev/platform/ | tr '\n' ' ')

      - name: Post to Slack
        if: ${{ always() }}
        id: slack-deploy-dev
        uses: unevenlabs/slack-github-action@v1.0.2
        with:
          channel-id: "ci"
          update-ts: ${{ steps.slack-build.outputs.ts }}
          payload: |
            {
              "text": "GitHub deploy dev result: <status-${{ job.status }}-status>\nAuthor: <author-${{ github.actor }}-author>\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "GitHub deploy dev result: <status-${{ job.status }}-status>\nAuthor: <author-${{ github.actor }}-author>\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build]
    environment: prod
    # if: github.ref == 'refs/heads/main' && needs.build.outputs.version != ''
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository k8s-configs
        uses: actions/checkout@v3
        with:
          repository: unevenlabs/k8s-configs
          token: ${{ secrets.DEVOPSBOT_TOKEN }}
          path: k8s-configs

      - name: Deploy to Prod Environment
        working-directory: k8s-configs
        run: |
          ./utils/version_update_batch.sh indexer-worker ${{ github.sha }} $(grep -rl 'application: indexer-worker-' prod/platform/ | tr '\n' ' ')
          ./utils/version_update_batch.sh indexer-api ${{ github.sha }} $(grep -rl 'application: indexer-api-' prod/platform/ | tr '\n' ' ')
          ./utils/version_update_batch.sh indexer-websocket ${{ github.sha }} $(grep -rl 'application: indexer-websocket-' prod/platform/ | tr '\n' ' ')

      - name: Post to Slack
        if: ${{ always() }}
        id: slack-deploy-prod
        uses: unevenlabs/slack-github-action@v1.0.2
        with:
          channel-id: "ci"
          update-ts: ${{ steps.slack-build.outputs.ts }}
          payload: |
            {
              "text": "GitHub deploy prod result: <status-${{ job.status }}-status>\nAuthor: <author-${{ github.actor }}-author>\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "GitHub deploy prod result: <status-${{ job.status }}-status>\nAuthor: <author-${{ github.actor }}-author>\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
